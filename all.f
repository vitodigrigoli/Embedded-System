\ Annotation has been removed from this file to expedite processing.
\ See the files in the /annexia/ for a full Literate Code tutorial, it's great!

: '\n' 10 ;
: BL 32 ;
: ':' [ CHAR : ] LITERAL ;
: ';' [ CHAR ; ] LITERAL ;
: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;
: 'A' [ CHAR A ] LITERAL ;
: '0' [ CHAR 0 ] LITERAL ;
: '-' [ CHAR - ] LITERAL ;
: '.' [ CHAR . ] LITERAL ;
: ( IMMEDIATE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;
: SPACES ( n -- ) BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
: WITHIN -ROT OVER <= IF > IF TRUE ELSE FALSE THEN ELSE 2DROP FALSE THEN ;
: ALIGNED ( c-addr -- a-addr ) 3 + 3 INVERT AND ;
: ALIGN HERE @ ALIGNED HERE ! ;
: C, HERE @ C! 1 HERE +! ;
: S" IMMEDIATE ( -- addr len )
	STATE @ IF
		' LITS , HERE @ 0 ,
		BEGIN KEY DUP '"'
                <> WHILE C, REPEAT
		DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN
	ELSE
		HERE @
		BEGIN KEY DUP '"'
                <> WHILE OVER C! 1+ REPEAT
		DROP HERE @ - HERE @ SWAP
	THEN
;
: ." IMMEDIATE ( -- )
	STATE @ IF
		[COMPILE] S" ' TELL ,
	ELSE
		BEGIN KEY DUP '"' = IF DROP EXIT THEN EMIT AGAIN
	THEN
;
: DICT WORD FIND ;
: VALUE ( n -- ) WORD CREATE DOCOL , ' LIT , , ' EXIT , ;
: TO IMMEDIATE ( n -- )
        DICT >DFA 4+
	STATE @ IF ' LIT , , ' ! , ELSE ! THEN
;
: +TO IMMEDIATE
        DICT >DFA 4+
	STATE @ IF ' LIT , , ' +! , ELSE +! THEN
;
: ID. 4+ COUNT F_LENMASK AND BEGIN DUP 0> WHILE SWAP COUNT EMIT SWAP 1- REPEAT 2DROP ;
: ?HIDDEN 4+ C@ F_HIDDEN AND ;
: ?IMMEDIATE 4+ C@ F_IMMED AND ;
: WORDS LATEST @ BEGIN ?DUP WHILE DUP ?HIDDEN NOT IF DUP ID. SPACE THEN @ REPEAT CR ;
: FORGET DICT DUP @ LATEST ! HERE ! ;
: CFA> LATEST @ BEGIN ?DUP WHILE 2DUP SWAP < IF NIP EXIT THEN @ REPEAT DROP 0 ;
: SEE
	DICT HERE @ LATEST @
	BEGIN 2 PICK OVER <> WHILE NIP DUP @ REPEAT
	DROP SWAP ':' EMIT SPACE DUP ID. SPACE
	DUP ?IMMEDIATE IF ." IMMEDIATE " THEN
	>DFA BEGIN 2DUP
        > WHILE DUP @ CASE
		' LIT OF 4 + DUP @ . ENDOF
		' LITS OF [ CHAR S ] LITERAL EMIT '"' EMIT SPACE
			4 + DUP @ SWAP 4 + SWAP 2DUP TELL '"' EMIT SPACE + ALIGNED 4 -
		ENDOF
		' 0BRANCH OF ." 0BRANCH ( " 4 + DUP @ . ." ) " ENDOF
		' BRANCH OF ." BRANCH ( " 4 + DUP @ . ." ) " ENDOF
		' ' OF [ CHAR ' ] LITERAL EMIT SPACE 4 + DUP @ CFA> ID. SPACE ENDOF
		' EXIT OF 2DUP 4 + <> IF ." EXIT " THEN ENDOF
		DUP CFA> ID. SPACE
	ENDCASE 4 + REPEAT
	';' EMIT CR 2DROP
;
: :NONAME 0 0 CREATE HERE @ DOCOL , ] ;
: ['] IMMEDIATE ' LIT , ;
: EXCEPTION-MARKER RDROP 0 ;
: CATCH ( xt -- exn? ) DSP@ 4+ >R ' EXCEPTION-MARKER 4+ >R EXECUTE ;
: THROW ( n -- ) ?DUP IF
	RSP@ BEGIN DUP R0 4-
        < WHILE DUP @ ' EXCEPTION-MARKER 4+
		= IF 4+ RSP! DUP DUP DUP R> 4- SWAP OVER ! DSP! EXIT THEN
	4+ REPEAT DROP
	CASE
		0 1- OF ." ABORTED" CR ENDOF
		." UNCAUGHT THROW " DUP . CR
	ENDCASE QUIT THEN
;
: ABORT ( -- ) 0 1- THROW ;
: PRINT-STACK-TRACE
	RSP@ BEGIN DUP R0 4-
        < WHILE DUP @ CASE
		' EXCEPTION-MARKER 4+ OF ." CATCH ( DSP=" 4+ DUP @ U. ." ) " ENDOF
		DUP CFA> ?DUP IF 2DUP ID. [ CHAR + ] LITERAL EMIT SWAP >DFA 4+ - . THEN
	ENDCASE 4+ REPEAT DROP CR
;
: BINARY ( -- ) 2 BASE ! ;
: OCTAL ( -- ) 8 BASE ! ;
: 2# BASE @ 2 BASE ! WORD NUMBER DROP SWAP BASE ! ;
: 8# BASE @ 8 BASE ! WORD NUMBER DROP SWAP BASE ! ;
: # ( b -- n ) BASE @ SWAP BASE ! WORD NUMBER DROP SWAP BASE ! ;
: UNUSED ( -- n ) PAD HERE @ - 4/ ;
: WELCOME
	S" TEST-MODE" FIND NOT IF
		." JONESFORTH VERSION " VERSION . CR
		UNUSED . ." CELLS REMAINING" CR
		." OK "
	THEN
;
WELCOME
HIDE WELCOME

HEX
FE000000 CONSTANT RPI4

: BIT_SET 1 SWAP LSHIFT OR ;
: BIT_CLEAR 1 SWAP LSHIFT INVERT AND ;

: 3BIT_SET 7 SWAP LSHIFT OR ;
: 3BIT_CLEAR 7 SWAP LSHIFT INVERT AND ;

: 4BIT_SET F SWAP LSHIFT OR ;
: 4BIT_CLEAR F SWAP LSHIFT INVERT AND ;

: 16BIT_SET FFFF SWAP LSHIFT OR ;
: 16BIT_CLEAR FFFF SWAP LSHIFT INVERT AND ;

: DELAY BEGIN 1 - DUP 0 = UNTIL DROP ;

RPI4 200000 + CONSTANT GPIO

GPIO 00 + CONSTANT GPFSEL0
GPIO 04 + CONSTANT GPFSEL1
GPIO 08 + CONSTANT GPFSEL2
GPIO 0C + CONSTANT GPFSEL3
GPIO 10 + CONSTANT GPFSEL4
GPIO 14 + CONSTANT GPFSEL5

GPIO 1C + CONSTANT GPSET0
GPIO 20 + CONSTANT GPSET1

GPIO 28 + CONSTANT GPCLR0
GPIO 2C + CONSTANT GPCLR1

GPIO 34 + CONSTANT GPLEV0
GPIO 38 + CONSTANT GPLEV1

GPIO 34 + CONSTANT GPLEV0
GPIO 38 + CONSTANT GPLEV1

: ?GPFSEL 
	DUP 9 <= IF GPFSEL0 ELSE 
	DUP 13 <= IF GPFSEL1 ELSE 
	DUP 1D <= IF GPFSEL2 ELSE
	DUP 27 <= IF GPFSEL2 ELSE
	DUP 31 <= IF GPFSEL2 ELSE
	DUP 39 <= IF GPFSEL2 ELSE
	." ERROR: GPIO NUMBER NOT VALID!"
	THEN THEN THEN THEN THEN THEN NIP ;

: GPIO_MODE  DUP ?GPFSEL DUP @ ROT A MOD 3 * TUCK 3BIT_CLEAR ;

: INPUT		SWAP 0 SWAP LSHIFT OR SWAP ! ;
: OUTPUT 	SWAP 1 SWAP LSHIFT OR SWAP ! ;
: ALT_0 	SWAP 4 SWAP LSHIFT OR SWAP ! ;
: ALT_1 	SWAP 5 SWAP LSHIFT OR SWAP ! ;
: ALT_2 	SWAP 6 SWAP LSHIFT OR SWAP ! ;
: ALT_3 	SWAP 7 SWAP LSHIFT OR SWAP ! ;
: ALT_4 	SWAP 3 SWAP LSHIFT OR SWAP ! ;
: ALT_5 	SWAP 2 SWAP LSHIFT OR SWAP ! ;

: ?GPSETCLR
	DUP 1F <= IF DROP GPSET0 GPCLR0 ELSE 
	DUP 39 <= IF DROP GPSET1 GPCLR1 ELSE 
	." ERROR: GPIO NUMBER NOT VALID!"
	THEN THEN ;

: GPIO_OUTPUT DUP 20 MOD 1 SWAP LSHIFT SWAP ?GPSETCLR ;
: ON DROP ! ;
: OFF NIP ! ;


: DELAY NOW + BEGIN DUP NOW - 0 <= UNTIL DROP ;

: USEC ;
: MSEC 3E8 * ;
: SEC 3E8 MSEC * ;


: MAIN GPLEV0 @ . 400 DELAY ;
: START BEGIN C GPIO_OUTPUT ON 1 SEC DELAY C GPIO_OUTPUT OFF 1 SEC DELAY  AGAIN ;

C GPIO_MODE OUTPUT
11 GPIO_MODE INPUT

RPI4 003000 + CONSTANT TIMER 

TIMER 00 + CONSTANT TIMER_CONTROL_STATUS
TIMER 04 + CONSTANT TIMER_COUNTER_LOW
TIMER 08 + CONSTANT TIMER_COUNTER_HIGH
TIMER 0C + CONSTANT TIMER_COMPARE_0
TIMER C1 + CONSTANT TIMER_COMPARE_1
TIMER C2 + CONSTANT TIMER_COMPARE_2
TIMER C3 + CONSTANT TIMER_COMPARE_3

: NOW TIMER_COUNTER_LOW @ ;

: DELAY NOW + BEGIN DUP NOW - 0 <= UNTIL DROP ;

: USEC ;
: MSEC 3E8 * ;
: SEC 3E8 MSEC * ;

C GPIO_OUTPUT ON 1 SEC DELAY C GPIO_OUTPUT OFF
